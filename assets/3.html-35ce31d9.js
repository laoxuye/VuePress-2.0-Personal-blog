import{_ as o,M as c,p as i,q as l,R as n,N as e,V as t,t as s,a1 as p}from"./framework-de73eade.js";const u={},d=n("h1",{id:"类型转换",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#类型转换","aria-hidden":"true"},"#"),s(" 类型转换")],-1),r={class:"table-of-contents"},k=p(`<p>JavaScript 作为一种弱类型的语言，不用像 C 语言那样要定义好数据类型，因为允许变量类型的 隐式类型转换 和允许 强制类型转换。我们在定义一个变量的时候，只需一个 <code>var</code>、<code>let</code>、<code>const</code> 搞定，不用担心数据的类型。</p><h2 id="基本规则" tabindex="-1"><a class="header-anchor" href="#基本规则" aria-hidden="true">#</a> 基本规则</h2><p>从 ECMAScript Standard 中了解 Number、String、Boolean、Array 和 Object 之间的相互转换会更加直观。</p><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> ToString</h3><blockquote><p>此处所说的 ToString 并非对象的 <code>toString()</code> 方法，而是指其他类型的值转换为字符串类型的操作。</p></blockquote><p>下面列出常见转换为 String 类型的规则：</p><ul><li><code>null</code>：转为 <code>&quot;null&quot;</code></li><li><code>undefined</code>：转为 <code>&quot;undefined&quot;</code></li><li>Boolean 类型： <ul><li><code>true</code> 转为 <code>&quot;true&quot;</code></li><li><code>false</code> 转为 <code>&quot;false&quot;</code></li></ul></li><li>Number 类型：转为数字的字符串形式 <ul><li>如 <code>10</code> 转为 <code>&quot;10&quot;</code></li><li><code>1e21</code> 转为 <code>&quot;1e+21&quot;</code></li></ul></li><li>Array 类型：转为字符串将各元素以小写逗号 , 连接，相当于调用数组 <code>Array.prototype.join()</code> 方法 <ul><li>空数组转为空字符串 <code>&#39;&#39;</code></li><li>数组中 <code>null</code> 和 <code>undefined</code> 会被当作 <strong>空字符串</strong> 处理</li></ul></li><li>普通对象：转为字符串相当于直接使用 <code>Object.prototype.toString()</code>，返回 <code>[object Object]</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &quot;null&quot;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;undefined&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;true&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;10&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token number">1e21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1e+21&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,2,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;1,,3&#39;</span>

<span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// &#39;[object Objecr]&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="tonumber" tabindex="-1"><a class="header-anchor" href="#tonumber" aria-hidden="true">#</a> ToNumber</h3>`,9);function m(v,b){const a=c("router-link");return i(),l("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[e(a,{to:"#基本规则"},{default:t(()=>[s("基本规则")]),_:1}),n("ul",null,[n("li",null,[e(a,{to:"#tostring"},{default:t(()=>[s("ToString")]),_:1})]),n("li",null,[e(a,{to:"#tonumber"},{default:t(()=>[s("ToNumber")]),_:1})])])])])]),k])}const h=o(u,[["render",m],["__file","3.html.vue"]]);export{h as default};
